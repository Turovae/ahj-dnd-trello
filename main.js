!function(){"use strict";class t{constructor(t){this.form=null,this.controlled=t,this.container=null,this.textarea=null,this.addBtn=null,this.addCard=this.addCard.bind(this),this.create()}create(){this.form=document.createElement("form"),this.form.classList.add("form_card-create"),this.textarea=document.createElement("textarea"),this.textarea.classList.add("textarea"),this.textarea.rows=3,this.textarea.placeholder="Enter a title for this card...",this.textarea.required=!0,this.form.appendChild(this.textarea),this.form.addEventListener("submit",this.addCard),this.addBtn=document.createElement("button"),this.addBtn.classList.add("add-btn"),this.addBtn.textContent="Add Card",this.addBtn.type="submit",this.form.appendChild(this.addBtn)}bindToDOM(t){if(this.container="string"==typeof t?document.querySelector(t):t,!(this.container instanceof HTMLElement))throw new Error("Контейнер не является DOM-элементом");this.container.appendChild(this.form),this.textarea.focus()}delete(){this.form.remove()}addCard(t){t.preventDefault(),this.controlled.addCard(this.textarea.value),this.controlled.deleteForm()}}class e{constructor(t,e,s){this.title=t,this.parent=e,this.stateService=s,this.element=null,this.stub=null,this.targetList=null,this.delBtn=null,this.lastPositionPointer=null,this.deleteCard=this.deleteCard.bind(this),this.startDrag=this.startDrag.bind(this),this.endDrag=this.endDrag.bind(this),this.moveCard=this.moveCard.bind(this),this.create(),this.shiftX=null,this.shiftY=null,this.width=null,this.height=null}create(){this.element=document.createElement("li"),this.element.classList.add("card","list-item"),this.element.addEventListener("mousedown",this.startDrag);const t=document.createElement("span");t.textContent=this.title,t.classList.add("card-title"),this.element.appendChild(t),this.delBtn=document.createElement("button"),this.delBtn.classList.add("del-btn"),this.delBtn.textContent=String.fromCharCode("9587"),this.element.appendChild(this.delBtn),this.delBtn.addEventListener("click",this.deleteCard),this.stub=document.createElement("li"),this.stub.classList.add("list-item","card-stub"),this.lastPositionPointer=document.createElement("li"),this.lastPositionPointer.style.height="0px"}appendTo(t){t.appendChild(this.element)}deleteCard(){this.element.remove(),this.stateService.updateAllStates()}startDrag(t){t.preventDefault(),t.target.closest(".del-btn")||(this.shiftX=t.clientX-this.element.getBoundingClientRect().left,this.shiftY=t.clientY-this.element.getBoundingClientRect().top,this.width=this.element.getBoundingClientRect().width,this.height=this.element.getBoundingClientRect().height,this.stub.style.width=`${this.width}px`,this.stub.style.height=`${this.height}px`,this.element.classList.add("dragged"),this.element.style.width=`${this.width}px`,this.element.style.height=`${this.height}px`,this.targetList=this.element.closest(".cards"),this.targetList.replaceChild(this.lastPositionPointer,this.element),this.lastPositionPointer.insertAdjacentElement("beforebegin",this.stub),document.body.appendChild(this.element),this.element.style.left=t.clientX-this.shiftX+"px",this.element.style.top=t.clientY-this.shiftY+"px",document.addEventListener("mousemove",this.moveCard),document.addEventListener("mouseup",this.endDrag))}endDrag(t){t.preventDefault(),this.element.classList.remove("dragged"),this.element.style="",this.targetList?this.targetList.replaceChild(this.element,this.stub):this.lastPositionPointer.parentElement.replaceChild(this.element,this.lastPositionPointer),document.removeEventListener("mousemove",this.moveCard),document.removeEventListener("mouseup",this.endDrag),this.lastPositionPointer.remove(),this.stateService.updateAllStates()}moveCard(t){t.preventDefault(),this.element.style.left=t.clientX-this.shiftX+"px",this.element.style.top=t.clientY-this.shiftY+"px";const e=t.target;if(e===this.stub)return;e&&e.closest(".column")?this.targetList=e.closest(".column").querySelector(".cards"):this.targetList=null,this.stub.remove();const s=e.closest(".card");if(s)return void s.insertAdjacentElement("beforebegin",this.stub);e.closest(".column-footer")&&this.targetList.appendChild(this.stub)}}class s{constructor(t,e){this.title=t,this.stateService=e,this.column=null,this.board=null,this.cardsContainer=null,this.footer=null,this.openFormBtn=null,this.addTaskForm=null,this.dragged=null,this.addCard=this.addNewCard.bind(this),this.openForm=this.openForm.bind(this),this.closeForm=this.closeForm.bind(this),this.createColumn()}createColumn(){this.column=document.createElement("div");const t=this.title.toLowerCase().replace(/\W/,"-");this.column.classList.add("column",t),this.column.dataset.name=t,this.column.insertAdjacentHTML("beforeend",s.createHeader(this.title,"column-header")),this.cardsContainer=document.createElement("ul"),this.cardsContainer.classList.add("column-list","cards"),this.column.appendChild(this.cardsContainer),this.renderCards(),this.footer=document.createElement("div"),this.footer.classList.add("column-footer"),this.column.appendChild(this.footer),this.openFormBtn=document.createElement("a"),this.openFormBtn.href="#",this.openFormBtn.classList.add("open-form"),this.openFormBtn.textContent="+ Add another card",this.footer.appendChild(this.openFormBtn),this.openFormBtn.addEventListener("click",this.openForm)}bindToDOM(t){if(this.board="string"==typeof t?document.querySelector(t):t,!(this.board instanceof HTMLElement))throw new Error("Контейнер не является DOM-элементом");this.board.appendChild(this.column)}renderCards(){const t=this.stateService.getState(this.title);this.cardsContainer.innerHTML="",t.forEach((t=>{new e(t,this,this.stateService).appendTo(this.cardsContainer)}))}addNewCard(t){this.stateService.addState(this.title,t);new e(t,this,this.stateService).appendTo(this.cardsContainer)}openForm(e){e.preventDefault(),this.addTaskForm=new t(this),this.addTaskForm.bindToDOM(this.footer),this.openFormBtn.removeEventListener("click",this.openForm),this.openFormBtn.addEventListener("click",this.closeForm)}closeForm(t){t.preventDefault(),this.deleteForm()}deleteForm(){this.addTaskForm.delete(),this.addTaskForm=null,this.openFormBtn.removeEventListener("click",this.closeForm),this.openFormBtn.addEventListener("click",this.openForm)}static createHeader(t,e){return`\n      <h2 class="${e}">${t}</h2>\n    `}}const i=new class{constructor(t){this.name=t,this._states={}}init(t){t.forEach((t=>{this.setState(t,[])}))}updateAllStates(){const t=document.querySelector(`.${this.name}`);this.getNames().forEach((e=>{const s=e.toLowerCase().replace(/\W/,"-"),i=t.querySelector(`.${s}`).querySelectorAll(".card-title");this.setState(e,[...i].map((t=>t.textContent)))}))}set states(t){this._states="object"==typeof t?t:{}}get states(){return this._states}getNames(){return Object.keys(this._states)}getState(t){return this._states[t]}setState(t,e){this._states[t]=e}addState(t,e){this._states[t]&&this._states[t].push(e)}deleteState(t,e){const s=this._states[t];s.includes(e)&&(this._states[t]=s.filter((t=>t!==e)))}saveToStorage(){const t=JSON.stringify(this.states);localStorage.setItem(this.name,t)}getFromStorage(){try{const t=JSON.parse(localStorage.getItem(this.name));return!!Object.keys(t).length&&(this.states=t,!0)}catch(t){return!1}}}("board");window.onload=()=>{i.getFromStorage()||i.init(["ToDo","In progress","Done"]),i.getNames().forEach((t=>{new s(t,i).bindToDOM(".board")}))},window.onbeforeunload=()=>{i.saveToStorage()}}();